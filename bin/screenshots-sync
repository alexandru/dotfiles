#!/usr/bin/env ruby

require 'optparse'
require 'pp'
require 'fileutils'

USAGE = <<ENDUSAGE
Usage:
  screenshots-sync [-h] -i <path> -o <path> -r <path> [-d]
ENDUSAGE

options = {}
OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-i", "--input-dir INPUT_DIR", "Path to the input directory.") {|v|
    raise OptionParser::InvalidArgument unless File.directory?(v)
    options[:processingDir] = File.expand_path(v)
  }
  opts.on("-o", "--output-ocr-dir OUTPUT_OCR_DIR", "Path to the output directory for OCR-ed PDF files.") {|v|
    raise OptionParser::InvalidArgument unless File.directory?(v)
    options[:ocrDir] = File.expand_path(v)
  }
  opts.on("-r", "--output-raw-dir OUTPUT_RAW_DIR", "Path to the output directory for the raw image files.") {|v|
    raise OptionParser::InvalidArgument unless File.directory?(v)
    options[:rawDir] = File.expand_path(v)
  }
  opts.on("-f", "--filter FILTER", "File name filter (LIST), defaults to *.jpg, *.jpeg, *.png") {|v|
    options[:filter] ||= []
    options[:filter].push(v)
  }
  opts.on("-v", "--[no-]verbose", "Run verbosely") {|v|
    options[:verbose] = v
  }
end.parse!

options[:tesseract] = `which tesseract`
options[:tesseract] = "/usr/local/bin/tesseract" unless File.exist? options[:tesseract]
options[:tesseract] = "/opt/homebrew/bin/tesseract" unless File.exist? options[:tesseract]
raise "Missing tesseract executable from PATH" unless File.executable?(options[:tesseract])

options[:filter] ||= ["*.png", "*.jpeg", "*.jpg"] unless options[:filter]

raise OptionParser::MissingArgument.new("--input-dir") if options[:processingDir].nil?
raise OptionParser::MissingArgument.new("--output-ocr-dir") if options[:ocrDir].nil?
raise OptionParser::MissingArgument.new("--output-raw-dir") if options[:rawDir].nil?

if options[:verbose]
  puts "\nRunning with options:\n\n"
  pp options
  puts
end

def execute(cmd, options)
  puts cmd if options[:verbose]
  out = if options[:verbose] then "" else "1>/dev/null 2>&1" end
  r = system("#{cmd} #{out}")
  unless r
    $stderr.puts "ERROR â€” command exited with error code (#{r}):\n  #{cmd}"
    exit 1
  end
end

# Cleanup raw directory (organize in subdirectories by year)
Dir["#{options[:rawDir]}/*"].each do |f|
  next unless File.file?(f)
  fname = File.basename(f)
  if fname =~ /Screenshot\s+(\d{4})-(\d{2})-(\d{2})/
    fdir = "#{$1}"
  else
    fdir = Time.now.strftime("%Y")
  end
  new_dir = File.join(options[:rawDir], fdir)
  FileUtils.mkdir_p(new_dir)
  FileUtils.move(f, File.join(new_dir, fname))
end

# Cleanup OCR directory (organize in subdirectories by year)
Dir["#{options[:ocrDir]}/*"].each do |f|
  next unless File.file?(f)
  fname = File.basename(f)
  if fname =~ /Screenshot\s+(\d{4})-(\d{2})-(\d{2})/
    fdir = "#{$1}"
  else
    fdir = Time.now.strftime("%Y")
  end
  new_dir = File.join(options[:ocrDir], fdir)
  FileUtils.mkdir_p(new_dir)
  FileUtils.move(f, File.join(new_dir, fname))
end

# Find new files and process them
options[:filter].each do |filter|
  Dir["#{options[:processingDir]}/#{filter}"].each do |f|
    # Filename format generated by macOS
    if f =~ /Screenshot\s+(\d{4})-(\d{2})-(\d{2})\s+at\s+(\d{2}\.\d{2}\.\d{2})/
      fname = "Screenshot #{$1}-#{$2}-#{$3} #{$4}#{File.extname(f)}"
      fdir = "#{$1}"
    # Filename format generated by my Galaxy Tab (Android)
    elsif f =~ /Screenshot[_\s-]+(\d{4})(\d{2})(\d{2})[_\s-]+(\d{2})(\d{2})(\d{2})(?:[_\s-]+([^.]*))?/
      details = if $7 then " #{$7}" else "" end
      fname = "Screenshot #{$1}-#{$2}-#{$3} #{$4}.#{$5}.#{$6}#{details}#{File.extname(f)}"
      fdir = "#{$1}"
    else
      fname = File.basename(f)
      fdir = Time.now.strftime("%Y")
    end

    raw_output = File.join(options[:rawDir], fdir, fname)
    ocr_output = File.join(options[:ocrDir], fdir, fname)
    source = File.expand_path(f)

    FileUtils.mkdir_p(File.dirname(raw_output))
    FileUtils.mkdir_p(File.dirname(ocr_output))

    if source != raw_output
      execute("mv \"#{source}\" \"#{raw_output}\"", options)
    end

    execute("#{options[:tesseract]} \"#{raw_output}\" \"#{ocr_output}\" -l eng pdf", options)
  end
end
