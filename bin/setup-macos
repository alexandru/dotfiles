#!/usr/bin/env bash

set -e

SCRIPT_DIR="$(dirname $0)"
cd "$SCRIPT_DIR" || exit 1

echo "--------------------------------"
echo "Installing Homebrew packages"
echo "---"

brew upgrade
brew install --quiet \
  1password-cli \
  ag \
  ast-grep \
  coursier \
  direnv \
  expect \
  fd \
  gradle \
  haskell-stack \
  jenv \
  kotlin \
  lazygit \
  luarocks \
  neovim \
  nvm \
  opam \
  pyenv \
  pyenv-virtualenv \
  python \
  rbenv \
  rclone \
  ripgrep \
  ruby \
  ruby-build \
  rustup-init \
  sbt \
  scala \
  telnet \
  terminal-notifier \
  tesseract \
  tree \
  wget

brew upgrade --cask
brew install --cask \
  android-platform-tools \
  font-fira-code \
  font-fira-code-nerd-font \
  jordanbaird-ice \
  neovide

echo "--------------------------------"
echo "Installing Rust stuff"
echo "---"

rustup update
rustup component add \
  clippy \
  rust-analyzer \
  rust-docs \
  rustfmt

echo "--------------------------------"
echo "Building scripts"
echo "---"

make -C "$HOME/bin/scala" clean all

echo "--------------------------------"
echo "Creating the .secrets file"
echo "---"

./setup-secrets

echo "--------------------------------"
echo "Configuring Notes & Wiki"
echo "---"

if [ ! -d "$HOME/Wiki" ]; then
  git clone git@github.com:alexandru/alexn.org.git "$HOME/Wiki"
fi

if [ ! -d "$HOME/Notes" ]; then
  git clone git@github.com:alexandru/notes.git "$HOME/Notes"
fi

if [[ -z "$(launchctl list | grep my.notes)" ]]; then
  launchctl load -w ~/Library/LaunchAgents/my.notes.plist
fi

echo "--------------------------------"
echo "Configuring Screenshots & OCR"
echo "---"

mkdir -p ~/Screenshots/{Processing,Raw,OCR}
defaults write com.apple.screencapture location ~/Screenshots/Processing
if [[ -z "$(launchctl list | grep my.screenshot.ocr)" ]]; then
  launchctl load -w ~/Library/LaunchAgents/my.sync.ocr.plist
fi

echo "--------------------------------"
echo "Other system settings"
echo "---"

# For VS Code + vim key bindings
defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
# IntelliJ IDEA CE + Ideavim
defaults write com.jetbrains.intellij.ce ApplePressAndHoldEnabled -bool false

# defaults write -g ApplePersistence -bool no
# defaults write -app 'preview' ApplePersistence -bool no
# defaults write com.apple.TextEdit ApplePersistence -bool no
# defaults write com.apple.TextEdit AutosavingDelay -int 0

echo "--------------------------------"
echo "Done!"
echo "---"
